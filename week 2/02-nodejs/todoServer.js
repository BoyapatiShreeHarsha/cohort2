/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const fs = require('fs');
const bodyParser = require('body-parser');
const path = require('path');
const {v4 : uuidv4} = require('uuid');

const app = express();

// uuidv4()

app.use(bodyParser.json());
app.use(express.urlencoded({ extended: true }));


// let todo=[{
//   id:"1",
//   title:"",
//   description:""
// }]

// let todo = [];
let p = path.join(__dirname, `./todos.txt`);

function readtodo(){
  return new Promise((resolve,reject)=>{
    fs.readFile(p,'utf-8',(err,data)=>{
      if(err)
      {
        reject(err);
      }
      // console.log(`what we have got ,${data}`);
      if(data)
      {
        resolve(JSON.parse(data));
      }
      resolve([]);
    })
  })
}

function writetodo(data){
  data=JSON.stringify(data);
  return new Promise((resolve,reject)=>{
    fs.writeFile(p,data,(err)=>{
      if(err)
      {
        reject(err);
      }
      else
      resolve();
    })
  })
}

app.get('/todos', async function (req, res) {
  try {
    let todo=await readtodo();
    res.status(200).json(todo);
  } catch (error) {
    res.status(404).json({ error: error });
  }

});

app.get('/todos/:id', async function (req, res) {
  try {
    let todo=await readtodo();
    let key = req.params.id;
    let data;
    for (let i = 0; i < todo.length; i++) {
      if (todo[i].id === key) {
        data = todo[i];
        break;
      }
    }

    if (data == undefined) {
      res.status(404).json({ error: "Not found" });

    }

    res.status(200).json(data);


  } catch (error) {
    res.status(404).json({ error: error });
  }
});


app.post('/todos', async function (req, res) {
  try {
    let todo=await readtodo();
    // console.log(`logging todos,${todo}`);
    let data = req.body;
    // console.log(data);
    if (!data) {
      res.status(404).json({ error: "Body not present" });
    }
    data.id = uuidv4();
    // console.log(`logging data,${data}`);
    todo.push(data);
    let write = await writetodo(todo);
    res.status(201).json({ id: data.id });
  } catch (error) {
    // console.log(error);
    res.status(404).json({ error: error });
  }

});



app.put('/todos/:id', async function (req, res) {
  try {
    let todo=await readtodo();
    let key = req.params.id;

    let data = req.body;
    let flag=0;
    console.log(`data to be updated,${data}`);
    for (let i = 0; i < todo.length; i++) {
      if (todo[i].id === key) {
        todo[i] = data;
        
        todo[i].id = key;
        let write = await writetodo(todo);
        flag=1;
        
        break;
      }
    }

    if(flag==1)
    {
      res.status(200).json(data);
    }
    else
    res.status(404).json({ error: "Not found" });


  } catch (error) {
    res.status(404).json({ error: error });
  }
});


app.delete('/todos/:id', async function (req, res) {
  let todo=await readtodo();
  let key = req.params.id;
  let a = todo.length;
  todo = todo.filter((task) => task.id != key);

  let b = todo.length;
  await writetodo(todo);
  if (a != b)
  {
    
    res.status(200).send("");
  }
  else
  res.status(404).send("");
})







app.get('*', function (req, res) {
  res.status(404).send("route not defined");
});



module.exports = app;